# -*- coding: utf-8 -*-
"""Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ubVxRZgJx7Uox2sZqXQsxKsNyKfMjIi1
"""

from google.colab import drive
drive.mount('/content/drive')

"""## 1. PARP inhibitor 저항성을 보이는 세포주, 변이 찾기"""

import pandas as pd

TARGET_DIR = '/content/drive/MyDrive/바이오공학 문제해결/Code/'

df = pd.read_csv(TARGET_DIR+'/Data/OV_ANOVA_Mon Sep 18 04_05_21 2023.csv') # Genomics of Drug Sensitivity in Cancer 데이터

df = df[df['Drug target']=='PARP1, PARP2'] # PARP inhibitor만 선택
df = df[df['feature_pval']<=0.05] # p-value 기준 1차 선택
df = df[~df['Feature Name'].str.startswith('cna')] # cna (copy number alteration)은 고려하지 않겠다는 뜻.

print('Feature name')
print(list(set(df['Feature Name'])))

Target_drugs = list(set(df['Drug name']))
print('PARP inhibitors')
print(Target_drugs)

"""### Feature와 세포주 관계"""

target_gene = 'SMARCA4'# 이번 분석에서의 표적 유전자

df2 = pd.read_csv(TARGET_DIR+'/Data/OV_Genetic_features_variant_Mon Sep 18 04_06_17 2023.csv') # OV(ovarian cancer, 난소암) 세포주들의 변이 정보 포함
tmp_df = df2[df2['Genetic Feature']=='%s_mut'%(target_gene)] # 세포주들에서 Genetic Feature 정보 얻기
tmp_df_pos = tmp_df[tmp_df['IS Mutated']==1] # 특정 유전자에 변이가 있는 세포주만 따로 확보
tmp_df_neg = tmp_df[tmp_df['IS Mutated']==0] # 특정 유전자에 변이가 없는 세포주만 따로 확보

mut_pos_cells = list(set(tmp_df_pos['Cell Line Name'])) # 변이가 있는 세포주
mut_neg_cells = list(set(tmp_df_neg['Cell Line Name'])) # 변이가 없는 세포주

print(mut_pos_cells)
print(mut_neg_cells)

"""두 세포주 그룹의 IC 50 비교"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

ic50_df = pd.read_csv(TARGET_DIR+'/Data/OV_IC_Mon Sep 18 04_05_59 2023.csv')

ic50_df = ic50_df[ic50_df['Drug Name'].isin(Target_drugs)] # inhibitor 선택
ic50_df['IC50 new'] = np.exp(ic50_df['IC50']) # log를 없애는 코드, exp 취해줌.

for each_drug, each_df in ic50_df.groupby('Drug Name'): # PAPR inhibitor 약물별로 데이터 나누어서 분석, 반복문 적용
    pos_data_df = each_df[each_df['Cell Line Name'].isin(mut_pos_cells)] # 데이터에서 변이가 있는 세포주 결과만 얻는 코드
    neg_data_df = each_df[each_df['Cell Line Name'].isin(mut_neg_cells)] # 데이터에서 변이가 없는 세포주 결과만 얻는 코드
    pos_ic50_values = pos_data_df['IC50 new'].values # 변이가 있는 세포주에 inhibitor 처리 했을 때의 세포주들에서 얻어진 IC50 값들
    neg_ic50_values = neg_data_df['IC50 new'].values # 변이가 있는 세포주에 inhibitor 처리 했을 때의 세포주들에서 얻어진 IC50 값들

    plt.boxplot([pos_ic50_values, neg_ic50_values], labels=['%s mut positive'%(target_gene), '%s mut negative'%(target_gene)])

    plt.title('%s'%(each_drug))
    plt.xlabel('Group')
    plt.ylabel('IC50 (uM)')

    # 그래프 보여주기
    plt.show()

"""## 2.암 환자에서 표적 유전자 변이/발현과 생존 관계 찾기

lifelines 패키지 설치
"""

!pip install lifelines # 생존 분석에 필요한 package 설치

"""- cBioPortal을 확인 시, 변이는 관찰되지 않음. 따라서, 발현과 생존 관계를 분석해야 함"""

print(survival_df.index)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from lifelines import KaplanMeierFitter
from lifelines.statistics import logrank_test

TARGET_DIR = '/content/drive/MyDrive/바이오공학 문제해결/Code/'

id_info_df = pd.read_csv(TARGET_DIR+'/Data/gencode.v22.annotation.gene.probeMap', sep='\t') # 서로 다른 gene ID를 통일 하기 위한 정보 파일 읽기
ensembl_id = id_info_df[id_info_df['gene']==target_gene]['id'].values[0] # gene symbol로부터 ensembl ID 얻기

df = pd.read_csv(TARGET_DIR+'/Data/TCGA-OV.htseq_fpkm-uq.tsv', sep='\t', index_col=0) # TCGA 난소암 환자의 RNA Seq 데이터 읽기
df = df.T # 행과 열을 변환

high_gene_exp_patients = df[ensembl_id].nlargest(n=int(len(df.index)*0.2)).index # 상위 25% 유전자 발현을 갖는 환자들 ID 얻기
low_gene_exp_patients = df[ensembl_id].nsmallest(n=int(len(df.index)*0.2)).index # 하위 25% 유전자 발현을 갖는 환자들 ID 얻기

survival_df = pd.read_csv(TARGET_DIR+'/Data/TCGA-OV.survival.tsv', sep='\t', index_col=0) # survival 정보 얻기

T_A = survival_df.loc[high_gene_exp_patients]['OS.time'].values # 생존 기간 정보
E_A = survival_df.loc[high_gene_exp_patients]['OS'].values # 생존 여부 정보

T_B = survival_df.loc[low_gene_exp_patients]['OS.time'].values
E_B = survival_df.loc[low_gene_exp_patients]['OS'].values

results = logrank_test(T_A, T_B, event_observed_A=E_A, event_observed_B=E_B) # log rank test 수행
print(results.print_summary())

kmf_A = KaplanMeierFitter() # plot 그림
kmf_B = KaplanMeierFitter() # plot 그림

kmf_A.fit(T_A, event_observed=E_A, label="%s high expression"%(target_gene))
kmf_B.fit(T_B, event_observed=E_B, label="%s low expression"%(target_gene))

plt.figure(figsize=(10, 7))
kmf_A.plot(ci_show=False, lw=2, c='red')  # 빨간색으로 변경
kmf_B.plot(ci_show=False, lw=2, c='blue')  # 파란색으로 변경

# plt.title('%s'%(each_col))
plt.ylabel('Survival Probability')
plt.xlabel('Days')
plt.legend()
plt.show()

print('P-value : ', results.p_value)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from lifelines import KaplanMeierFitter
from lifelines.statistics import logrank_test

TARGET_DIR = '/content/drive/MyDrive/바이오공학 문제해결/Code/'

target_gene = '	SMARCA4'# 이번 분석에서의 표적 유전자

id_info_df = pd.read_csv(TARGET_DIR+'/Data/gencode.v22.annotation.gene.probeMap', sep='\t')
ensembl_id = id_info_df[id_info_df['gene'] == target_gene]['id'].values[0]

df = pd.read_csv(TARGET_DIR+'/Data/TCGA-OV.htseq_fpkm-uq.tsv', sep='\t', index_col=0)
df = df.T

high_gene_exp_patients = df[ensembl_id].nlargest(n=int(len(df.index) * 0.2)).index
low_gene_exp_patients = df[ensembl_id].nsmallest(n=int(len(df.index) * 0.2)).index

high_gene_exp_patients = list(set(high_gene_exp_patients) & set(survival_df.index))
low_gene_exp_patients = list(set(low_gene_exp_patients) & set(survival_df.index))

survival_df = pd.read_csv(TARGET_DIR+'/Data/TCGA-OV.survival.tsv', sep='\t', index_col=0)

T_A = survival_df.loc[high_gene_exp_patients]['OS.time'].values
E_A = survival_df.loc[high_gene_exp_patients]['OS'].values

T_B = survival_df.loc[low_gene_exp_patients]['OS.time'].values
E_B = survival_df.loc[low_gene_exp_patients]['OS'].values

results = logrank_test(T_A, T_B, event_observed_A=E_A, event_observed_B=E_B)
print(results.print_summary())

kmf_A = KaplanMeierFitter()
kmf_B = KaplanMeierFitter()

kmf_A.fit(T_A, event_observed=E_A, label="%s high expression"%(target_gene))
kmf_B.fit(T_B, event_observed=E_B, label="%s low expression"%(target_gene))

plt.figure(figsize=(10, 7))
kmf_A.plot(ci_show=False, lw=2, c='red')
kmf_B.plot(ci_show=False, lw=2, c='blue')

plt.ylabel('Survival Probability')
plt.xlabel('Days')
plt.legend()
plt.show()

print('P-value:', results.p_value)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from lifelines import KaplanMeierFitter
from lifelines.statistics import logrank_test

TARGET_DIR = '/content/drive/MyDrive/바이오공학 문제해결/Code/'

id_info_df = pd.read_csv(TARGET_DIR+'/Data/gencode.v22.annotation.gene.probeMap', sep='\t') # 서로 다른 gene ID를 통일 하기 위한 정보 파일 읽기
ensembl_id = id_info_df[id_info_df['gene']==target_gene]['id'].values[0] # gene symbol로부터 ensembl ID 얻기

df = pd.read_csv(TARGET_DIR+'/Data/TCGA-OV.htseq_fpkm-uq.tsv', sep='\t', index_col=0) # TCGA 난소암 환자의 RNA Seq 데이터 읽기
df = df.T # 행과 열을 변환

high_gene_exp_patients = df[ensembl_id].nlargest(n=int(len(df.index)*0.2)).index # 상위 25% 유전자 발현을 갖는 환자들 ID 얻기
low_gene_exp_patients = df[ensembl_id].nsmallest(n=int(len(df.index)*0.2)).index # 하위 25% 유전자 발현을 갖는 환자들 ID 얻기

survival_df = pd.read_csv(TARGET_DIR+'/Data/TCGA-OV.survival.tsv', sep='\t', index_col=0) # survival 정보 얻기

high_gene_exp_patients = list(set(high_gene_exp_patients) & set(survival_df.index))
low_gene_exp_patients = list(set(low_gene_exp_patients) & set(survival_df.index))

T_A = survival_df.loc[high_gene_exp_patients]['OS.time'].values # 생존 기간 정보
E_A = survival_df.loc[high_gene_exp_patients]['OS'].values # 생존 여부 정보

# low_gene_exp_patients 리스트에 있는 인덱스 중에서 survival_df에 존재하는 것만 선택
existing_indices = [idx for idx in low_gene_exp_patients if idx in survival_df.index]

# 선택된 인덱스에 대한 데이터 필터링
T_B = survival_df.loc[existing_indices]['OS.time'].values
E_B = survival_df.loc[existing_indices]['OS'].values

results = logrank_test(T_A, T_B, event_observed_A=E_A, event_observed_B=E_B) # log rank test 수행
print(results.print_summary())

kmf_A = KaplanMeierFitter() # plot 그림
kmf_B = KaplanMeierFitter() # plot 그림

kmf_A.fit(T_A, event_observed=E_A, label="%s high expression"%(target_gene))
kmf_B.fit(T_B, event_observed=E_B, label="%s low expression"%(target_gene))

plt.figure(figsize=(10, 7))
kmf_A.plot(ci_show=False, lw=2, c='red')  # 빨간색으로 변경
kmf_B.plot(ci_show=False, lw=2, c='blue')  # 파란색으로 변경

# plt.title('%s'%(each_col))
plt.ylabel('Survival Probability')
plt.xlabel('Days')
plt.legend()
plt.show()

print('P-value : ', results.p_value)

"""## 3. DepMap 데이터로 변이, 발현으로 표적 유전자 찾기

### 변이가 있는 세포들과 없는 세포들 사이의 gene dependency score 비교 분석

CRISPr 결과를 이용
"""

import pandas as pd
import pandas as pd
import numpy as np
from scipy.stats import ttest_ind

TARGET_DIR = '/content/drive/MyDrive/Colab Notebooks/Lectures/바이오공학 문제해결/Code/'

def get_depmap_cell_info(mut_pos_cells, mut_neg_cells): # 변이가 있는 세포주와 없는 세포주를 전달인자로 받는 함수
    # GDSC 데이터베이스와 DepMap 데이터베이스에서 사용하는 세포주 ID가 달라 이 부분을 맞춰주기 위한 정보를 얻는 파일
    # COSMIC id를 이용하여 세포주 이름을 확인
    cosmic_id_df = pd.read_csv(TARGET_DIR+'/Data/Cell_Lines_Details.csv')
    cosmic_id_df['COSMIC identifier'] = cosmic_id_df['COSMIC identifier'].astype(int)

    # 정보가 없는 데이터는 제거
    cosmic_id_df = cosmic_id_df.dropna(subset=['COSMIC identifier'])

    cosmic_pos_df = cosmic_id_df[cosmic_id_df['Sample Name'].isin(mut_pos_cells)] # 변이가 있는 세포주 결과를 DepMap 데이터베이스 파일에서 얻기
    cosmic_neg_df = cosmic_id_df[cosmic_id_df['Sample Name'].isin(mut_neg_cells)] # 변이가 없는 세포주 결과를 DepMap 데이터베이스 파일에서 얻기

    cosmic_pos_ids = cosmic_pos_df['COSMIC identifier'].values
    cosmic_neg_ids = cosmic_neg_df['COSMIC identifier'].values

    cell_info_df = pd.read_csv(TARGET_DIR+'/Data/Model.csv') # DepMap 세포주 정보 파일
    cell_info_df = cell_info_df.dropna(subset=['COSMICID'])
    cell_info_df['COSMICID'] = cell_info_df['COSMICID'].astype(int)

    # 변이가 있는 세포주 ID를 DepMap에서 얻기
    target_cells1_ids = cell_info_df[cell_info_df['COSMICID'].isin(cosmic_pos_ids)]['ModelID']
    # 변이가 없는 세포주 ID를 DepMap에서 얻기
    target_cells2_ids = cell_info_df[cell_info_df['COSMICID'].isin(cosmic_neg_ids)]['ModelID']

    target_cells1_ids = list(set(target_cells1_ids))
    target_cells2_ids = list(set(target_cells2_ids))

    # Dependency score 정보 얻기
    dependency_df = pd.read_csv(TARGET_DIR+'/Data/CRISPR_(DepMap_Public_23Q2+Score,_Chronos).csv', index_col=0)
    target_cells1_ids = list(set(dependency_df.index)&set(target_cells1_ids))
    target_cells2_ids = list(set(dependency_df.index)&set(target_cells2_ids))

    # 행과 열 변환
    dependency_df_t = dependency_df.T

    depmap_pos_cell_df = dependency_df_t[target_cells1_ids] # 변이가 있는 세포주들이 보이는 Dependency score 정보 얻기
    depmap_neg_cell_df = dependency_df_t[target_cells2_ids] # 변이가 없는 세포주들이 보이는 Dependency score 정보 얻기

    return depmap_pos_cell_df, depmap_neg_cell_df

depmap_pos_cell_df, depmap_neg_cell_df = get_depmap_cell_info(mut_pos_cells, mut_neg_cells)

print('%s\t%s\t%s\t%s'%('Gene', 'P-value', 'With mutation', 'Without mutation'))
for each_gene in depmap_pos_cell_df.index: # 각 유전자 별로 KO 시 dependency score를 얻기 위한 반복문
    scores1 = depmap_pos_cell_df.loc[each_gene].values # 변이 있는 세포주들이 갖는 dependency score
    scores2 = depmap_neg_cell_df.loc[each_gene].values # 변이 없는 세포주들이 갖는 dependency score
    # t-테스트 수행
    t_statistic, p_value = ttest_ind(scores1, scores2) # t-test 수행
    if p_value < 0.05:
        if np.mean(scores1) < -0.5: # 변이가 있는 세포주가 잘 죽는 기준 설정
            if np.mean(scores1) / np.mean(scores2) > 1.5: # 변이가 없는 세포주가 갖는 평균 score보다 1.5배 더 낮아야 함
                print('%s\t%s\t%s\t%s'%(each_gene, p_value, np.mean(scores1), np.mean(scores2)))

"""### 발현이 낮은 세포와 높은 세포를 비교 분석"""

import pandas as pd
import pandas as pd
import numpy as np
from scipy.stats import ttest_ind

TARGET_DIR = '/content/drive/MyDrive/Colab Notebooks/Lectures/바이오공학 문제해결/Code/'

def get_depmap_cell_info_using_exp():
    cell_info_df = pd.read_csv(TARGET_DIR+'/Data/Model.csv')
    cell_info_df = cell_info_df[cell_info_df['OncotreePrimaryDisease']=='Ovarian Epithelial Tumor']
    target_ov_cells = list(cell_info_df['ModelID'])

    ## 발현 값 얻고, SMAD4 발현을 기준으로 상위, 하위 세포주 얻기
    expression_info_df = pd.read_csv(TARGET_DIR+'/Data/Expression_Public_23Q2.csv', index_col=0)
    target_ov_cells = list(set(target_ov_cells) & set(expression_info_df.index))
    expression_info_df = expression_info_df[[target_gene]]
    expression_info_df = expression_info_df.loc[target_ov_cells]

    expression_info_df_sort = expression_info_df.sort_values(by=target_gene, ascending=False)
    total_size = len(expression_info_df_sort)

    high_exp_cell_df = expression_info_df_sort[:int(total_size*0.3)]
    low_exp_cell_df = expression_info_df_sort[-int(total_size*0.3):]

    target_cells1_ids = low_exp_cell_df.index
    target_cells2_ids = high_exp_cell_df.index

    dependency_df = pd.read_csv(TARGET_DIR+'/Data/CRISPR_(DepMap_Public_23Q2+Score,_Chronos).csv', index_col=0) # RNAi
    target_cells1_ids = list(set(dependency_df.index)&set(target_cells1_ids))
    target_cells2_ids = list(set(dependency_df.index)&set(target_cells2_ids))

    dependency_df_t = dependency_df.T

    depmap_pos_cell_df = dependency_df_t[target_cells1_ids]
    depmap_neg_cell_df = dependency_df_t[target_cells2_ids]

    return depmap_pos_cell_df, depmap_neg_cell_df

# 위 코드와 거의 비슷하지만, 변이 유무로 세포주를 나누는 것이 아닌 특정 유전자의 발현 정도를 이용해 세포주를 구분
depmap_pos_cell_df, depmap_neg_cell_df = get_depmap_cell_info_using_exp()

#######
print('%s\t%s\t%s\t%s'%('Gene', 'P-value', 'Low expression', 'High expression'))
for each_gene in depmap_pos_cell_df.index:
    scores1 = depmap_pos_cell_df.loc[each_gene].values
    scores2 = depmap_neg_cell_df.loc[each_gene].values

    # t-테스트 수행
    t_statistic, p_value = ttest_ind(scores1, scores2)
    if p_value < 0.05:
        if np.mean(scores1) < -0.5:
            if np.mean(scores1) / np.mean(scores2) > 1.5:
                print('%s\t%s\t%s\t%s'%(each_gene, p_value, np.mean(scores1), np.mean(scores2)))